// this file was generated by serverless-auto-swagger
module.exports = {
  swagger: '2.0',
  info: {
    title: 'escenic-cue-live-api',
    version: '1',
  },
  paths: {
    '/entry': {
      post: {
        summary: 'listener',
        description: '',
        operationId: 'listener.post./entry',
        consumes: ['application/json'],
        produces: ['application/json'],
        parameters: [],
        responses: {
          '200': {
            description: '200 response',
          },
        },
      },
    },
    '/entries/{eventId}': {
      get: {
        summary: 'fetcher',
        description: '',
        operationId: 'fetcher.get./entries/{eventId}',
        consumes: ['application/json'],
        produces: ['application/json'],
        parameters: [
          {
            name: 'eventId',
            in: 'path',
            required: true,
            type: 'string',
          },
          {
            in: 'query',
            name: 'before',
            type: 'string',
            description:
              'filters the output to entries published before a certain cursor/pointer',
            required: false,
          },
          {
            in: 'query',
            name: 'after',
            type: 'string',
            description:
              'filters the output to entries published after a certain cursor/pointer',
            required: false,
          },
          {
            in: 'query',
            name: 'limit',
            type: 'string',
            description: 'limits the size of the output (default 10)',
            required: false,
          },
        ],
        responses: {
          '200': {
            description: 'Array of event entries',
            schema: {
              $ref: '#/definitions/CueLiveEntriesResponse',
            },
          },
        },
      },
    },
    '/entry/{eventId}/{id}': {
      get: {
        summary: 'fetcher',
        description: '',
        operationId: 'fetcher.get./entry/{eventId}/{id}',
        consumes: ['application/json'],
        produces: ['application/json'],
        parameters: [
          {
            name: 'eventId',
            in: 'path',
            required: true,
            type: 'string',
          },
          {
            name: 'id',
            in: 'path',
            required: true,
            type: 'string',
          },
        ],
        responses: {
          '200': {
            description: 'An Event Entry',
            schema: {
              $ref: '#/definitions/CueLiveEntryResponse',
            },
          },
          '404': {
            description: 'Entry not found',
          },
        },
      },
    },
    '/test': {
      get: {
        summary: 'fetcher',
        description: '',
        operationId: 'fetcher.get./test',
        consumes: ['application/json'],
        produces: ['application/json'],
        parameters: [],
        responses: {
          '200': {
            description: '200 response',
          },
        },
      },
    },
  },
  definitions: {
    Widget: {
      properties: {
        kind: {
          items: {
            title: 'Widget.kind.[]',
            type: 'string',
          },
          title: 'Widget.kind',
          type: 'array',
        },
        text: {
          title: 'Widget.text',
        },
      },
      required: ['kind'],
      additionalProperties: false,
      title: 'Widget',
      type: 'object',
    },
    CueLiveEntriesResponse: {
      properties: {
        entries: {
          items: {
            $ref: '#/definitions/CueLiveEntryResponse',
            title: 'CueLiveEntriesResponse.entries.[]',
          },
          title: 'CueLiveEntriesResponse.entries',
          type: 'array',
        },
        sticky: {
          items: {
            $ref: '#/definitions/CueLiveEntryResponse',
            title: 'CueLiveEntriesResponse.sticky.[]',
          },
          title: 'CueLiveEntriesResponse.sticky',
          type: 'array',
        },
        previousCursor: {
          title: 'CueLiveEntriesResponse.previousCursor',
          type: 'string',
        },
        nextCursor: {
          title: 'CueLiveEntriesResponse.nextCursor',
          type: 'string',
        },
        newest: {
          title: 'CueLiveEntriesResponse.newest',
          type: 'string',
        },
        oldest: {
          title: 'CueLiveEntriesResponse.oldest',
          type: 'string',
        },
      },
      required: [
        'entries',
        'sticky',
        'previousCursor',
        'nextCursor',
        'newest',
        'oldest',
      ],
      additionalProperties: false,
      title: 'CueLiveEntriesResponse',
      type: 'object',
    },
    CueLiveEntryResponse: {
      properties: {
        id: {
          title: 'CueLiveEntryResponse.id',
          type: 'number',
        },
        eventId: {
          title: 'CueLiveEntryResponse.eventId',
          type: 'number',
        },
        author: {
          title: 'CueLiveEntryResponse.author',
        },
        eTag: {
          title: 'CueLiveEntryResponse.eTag',
          type: 'string',
        },
        values: {
          items: {
            $ref: '#/definitions/Widget',
            title: 'CueLiveEntryResponse.values.[]',
          },
          title: 'CueLiveEntryResponse.values',
          type: 'array',
        },
      },
      required: ['id', 'eventId', 'author', 'eTag'],
      additionalProperties: false,
      title: 'CueLiveEntryResponse',
      type: 'object',
    },
    CueLiveEntryFromCook: {
      properties: {
        values: {
          items: {
            $ref: '#/definitions/Widget',
            title: 'CueLiveEntryFromCook.values.[]',
          },
          title: 'CueLiveEntryFromCook.values',
          type: 'array',
        },
      },
      required: ['values'],
      additionalProperties: false,
      title: 'CueLiveEntryFromCook',
      type: 'object',
    },
  },
  securityDefinitions: {},
  basePath: '/test',
};
