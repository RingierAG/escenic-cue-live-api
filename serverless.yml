service: SERVICE-NAME

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '>=1.0.0 <2.0.0'

plugins:
  - serverless-pseudo-parameters
  - serverless-plugin-aws-alerts

custom:
  env: ${opt:stage,'stg'}
  proj: ${opt:proj,'DEFAULT-PROJECT-NAME'}

  alerts:
    stages: # Optionally - select which stages to deploy alarms to
      - prod
    definitions:
      functionErrors:
        threshold: 100
        period: 600
        treatMissingData: notBreaching # override treatMissingData
      functionInvocations:
        threshold: 15000
        period: 60
        treatMissingData: notBreaching # override treatMissingData
      functionDuration:
        threshold: 600
        period: 60
        treatMissingData: notBreaching # override treatMissingData
      functionThrottles:
        threshold: 1
        treatMissingData: notBreaching # override treatMissingData
    topics:
      alarm:
        topic: ${cf:${self:custom.env}-${self:custom.proj}-TOPIC-NAME}
    function:
      - functionErrors
      - functionInvocations
      - functionDuration
      - functionThrottles
      - name: logErrorAlarm
        metric: ErrorLogs
        statistic: Sum
        period: 60
        evaluationPeriods: 1
        comparisonOperator: GreaterThanOrEqualToThreshold
        threshold: 100
        treatMissingData: notBreaching
        pattern: '{$.level>=50}'

provider:
  name: aws
  runtime: nodejs10.x

  stage: ${opt:stage, 'stg'} # Set the default stage used. Default is dev
  region: eu-central-1 # Overwrite the default region used. Default is us-east-1

  memorySize: 128 # Overwrite the default memory size. Default is 1024
  timeout: 15 # The default is 6 seconds. Note: API Gateway current maximum is 30 seconds
  logRetentionInDays: 7 # Set the default RetentionInDays for a CloudWatch LogGroup

  # you can define service wide environment variables here
  environment:

  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - ec2:CreateNetworkInterface
        - ec2:DescribeNetworkInterfaces
        - ec2:DeleteNetworkInterface
      Resource: '*'
    - Effect: Allow
      Action:
        - elasticache:*
      Resource:
        - arn:aws:elasticache:${self:provider.region}:#{AWS::AccountId}:cluster:${self:provider.stage}-${self:custom.proj}-CACHE-NAME

# you can add packaging information here
package:
  exclude:
    - .git/**
    - README.md
    - .gitignore

functions:
  FUNCTIONNAME:
    name: ${self:provider.stage}-${self:service}
    description: Lambda boilerplate
    handler: src/handlers/api.handler
    timeout: 5 # Timeout for this specific function.  Overrides the default set above.
    tags: # Function specific tags
      Environment: ${self:provider.stage}
      Name: ${self:provider.stage}-${self:service}
      Project: PROJECT-NAME
    environment:
      STAGE: ${self:provider.stage}
    events:
      - http:
          path: '{proxy+}'
          method: get
    vpc:
      securityGroupIds:
        - ${cf:${self:custom.env}-${self:custom.proj}-base-vpc.DefaultSecurityGroup}
      subnetIds:
        - ${cf:${self:custom.env}-${self:custom.proj}-base-vpc.PrivateSubnet1A}
        - ${cf:${self:custom.env}-${self:custom.proj}-base-vpc.PrivateSubnet1B}
        - ${cf:${self:custom.env}-${self:custom.proj}-base-vpc.PrivateSubnet1C}
